<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.pro.myrp.persistence.purchase.purchaseDAO">
 	
 	 <!-- 구매내역 총 개수 -->
 	<select id="select_purchase_cnt" resultType="int">
 		<![CDATA[
 		SELECT	COUNT(*)
 		FROM	purchase_ORDER
 		]]>
 	</select>
 	
 	<!-- 구매내역 목록 -->
 	<select id="select_purchase_list" parameterType="java.util.Map"
 	resultType="PurchaseDTO">
 		<![CDATA[
	   SELECT  *
		FROM    ( SELECT PURCHASE_ID, ACCOUNT_ID, ORDER_ID, PRODUCT_ID, 
                    COMPANY_ID, EMPLOYEE_ID, REG_DATE, UPDATE_DATE, 
                    STORAGE_IN_DATE, COUNT_PURCHASE, SUPPLY_PRICE, 
                    PURCHASE_STATE, CONDITION_NOTE_PAYABLE, COMPANY_NAME ,rownum rNum
 
		        FROM    (SELECT  P.PURCHASE_ID, P.ACCOUNT_ID, P.ORDER_ID, P.PRODUCT_ID, 
                            P.COMPANY_ID, P.EMPLOYEE_ID, P.REG_DATE, P.UPDATE_DATE, 
                            P.STORAGE_IN_DATE, P.COUNT_PURCHASE, P.SUPPLY_PRICE, 
                            P.PURCHASE_STATE, P.CONDITION_NOTE_PAYABLE, C.COMPANY_NAME
				
		                FROM    PURCHASE_ORDER P , COMPANY C
                    WHERE   P.COMPANY_ID = C.COMPANY_ID
		                ORDER BY PURCHASE_ID
		                )
		        )
		WHERE rNum >= #{start} AND rNUM <= #{end}
 		]]>
 	</select>
 	
 	<!-- 구매내역 자세히 보기 -->
 	<select id="select_detail_purchase" parameterType="String"
 	resultType="PurchaseDTO">
 		<![CDATA[
		SELECT  * 
	    FROM   ( SELECT  P.PURCHASE_ID, P.ACCOUNT_ID, P.ORDER_ID, P.PRODUCT_ID, 
                            P.COMPANY_ID, P.EMPLOYEE_ID, P.REG_DATE, P.UPDATE_DATE, 
                            P.STORAGE_IN_DATE, P.COUNT_PURCHASE, P.SUPPLY_PRICE, 
                            P.PURCHASE_STATE, P.CONDITION_NOTE_PAYABLE, C.COMPANY_NAME
			     FROM    PURCHASE_ORDER P , COMPANY C
	             WHERE   P.COMPANY_ID = C.COMPANY_ID )
		WHERE 	COMPANY_ID = #{company_id}
 		]]>
 	</select>
 	
 	
 	
 	<!-- 구매 정보 수정 -->
 	<update id="update_purchase" parameterType="PurchaseDTO">
 		<![CDATA[
		UPDATE	PURCHASE_ORDER 
		SET		PURCHASE_ID = #{purchase_id}, ACCOUNT_ID = #{account_id}, ORDER_ID = #{order_id},
				PRODUCT_ID = #{product_id}, EMPLOYEE_ID = #{employee_id}, REG_DATE = #{reg_date}, 
				UPDATE_DATE = #{update_date}, STORAGE_IN_DATE = #{storage_in_date},
				COUNT_PURCHASE = #{count_purchase}, SUPPLY_PRICE = #{supply_price}, 
				PURCHASE_STATE = #{purchase_state}, CONDITION_NOTE_PAYABLE = #{condition_note_payable}
		WHERE	COMPANY_ID = #{company_id}
 		]]>
 	</update>
 	
 	
 	
 	<!-- 구매 바로 검색 개수 -->
 	<select id="count_quick_serch_purchase" parameterType="String"
 	resultType="int">
 		<![CDATA[
		SELECT  COUNT(P.PURCHASE_ID) 
	    FROM	PURCHASE_ORDER P
	    JOIN	COMPANY C
	    ON		P.COMPANY_ID = C.COMPANY_ID
		WHERE 	C.COMPANY_NAME LIKE '%'||#{search_str}||'%'
 		]]>
 	</select>
 	
 	
 	<!-- 구매 바로 검색 -->
 	<select id="select_quick_serch_purchase" parameterType="java.util.Map"
 	resultType="PurchaseDTO">
 		<![CDATA[
 		SELECT  * 
		FROM (	SELECT   P.PURCHASE_ID, P.ACCOUNT_ID, P.ORDER_ID, P.PRODUCT_ID, 
		                 P.COMPANY_ID, P.EMPLOYEE_ID, P.REG_DATE, P.UPDATE_DATE, 
		                 P.STORAGE_IN_DATE, P.COUNT_PURCHASE, P.SUPPLY_PRICE, 
		                 P.PURCHASE_STATE, P.CONDITION_NOTE_PAYABLE, C.COMPANY_NAME, rownum rNum
			    FROM	PURCHASE_ORDER P
			    JOIN	COMPANY C
			    ON		P.COMPANY_ID = C.COMPANY_ID
				WHERE 	C.COMPANY_NAME LIKE '%'||#{search_str}||'%' )
		WHERE rNum >= #{start} AND rNUM <= #{end}
		ORDER BY PURCHASE_ID
		
 		]]>
 	</select>
 	
 	
 	
 	<!-- 상품 테이블 목록 불러오기 -->
 	<select id="select_product_ids" resultType="PurchaseDTO">
 		<![CDATA[
 		SELECT 	PRODUCT_ID, PRODUCT_NAME
		FROM 	PRODUCT
		]]>
 	</select>
 	
 	<!-- 거래처 테이블 목록 불러오기 -->
 	<select id="select_company_ids" resultType="PurchaseDTO">
 		<![CDATA[
 		SELECT 	COMPANY_ID, COMPANY_NAME
		FROM 	COMPANY
		]]>
 	</select>
 	
 	<!-- 사원 테이블 목록 불러오기 -->
 	<select id="select_employee_ids" resultType="PurchaseDTO">
 		<![CDATA[
 		SELECT 	EMPLOYEE_ID, EMPLOYEE_NAME
		FROM 	EMPLOYEE
		]]>
 	</select>
 	
 	<!-- 오더 테이블 목록 불러오기 -->
 	<select id="select_account_ids" resultType="PurchaseDTO">
 		<![CDATA[
 		SELECT 	ACCOUNT_ID, ACCOUNT_NAME
		FROM 	ACCOUNT
		]]>
 	</select>
 	
	<!-- PURCHASE_ID 불러오기 -->
 	<select id="select_purchase_id" resultType="String">
 		<![CDATA[
 		SELECT 	3110||TO_CHAR(( SELECT SYSDATE FROM DUAL ),'YYMMDD')
      			||LPAD(PURCHASE_SEQ.NEXTVAL,2,0)
 		FROM 	DUAL
 		]]>
 	</select>
 	
 	
 	<!-- STATEMENT_ID 불러오기 -->
 	<select id="select_statement_id" resultType="String">
 		<![CDATA[
 		SELECT 	5000||TO_CHAR(( SELECT SYSDATE FROM DUAL ),'YYMMDD')
      			||LPAD(STATEMENT_SEQ.NEXTVAL,2,0)
 		FROM 	DUAL
 		]]>
 	</select>


 	
 	<!-- 구매 입력  -->
 	<insert id="insert_reg_purchase" parameterType="PurchaseDTO">
 		
 		INSERT INTO PURCHASE_ORDER (	
				PURCHASE_ID, ORDER_ID, ACCOUNT_ID, 
			    PRODUCT_ID, COMPANY_ID, EMPLOYEE_ID,
			    REG_DATE, UPDATE_DATE,  STORAGE_IN_DATE,
			    COUNT_PURCHASE, SUPPLY_PRICE, PURCHASE_STATE,
			    CONDITION_NOTE_PAYABLE)
		VALUES ( 
				#{purchase_id},  -- PURCHASE_ID
			    3110||TO_CHAR(( SELECT SYSDATE FROM DUAL ),'YYMMDD')
			    	||LPAD(ORDER_SEQ.NEXTVAL,2,0), <!-- ORDER_ID -->
			    #{account_id}, <!-- ACCOUNT_ID -->
			    #{product_id}, <!-- PRODUCT_ID -->
			    #{company_id}, <!-- COMPANY_ID -->
			    #{employee_id}, <!-- EMPLOYEE_ID -->
			    #{reg_date}, <!-- REG_DATE -->
			    SYSDATE, <!-- UPDATE_DATE -->
			    #{storage_in_date}, <!-- STORAGE_IN_DATE -->
			    #{count_purchase}, <!-- COUNT_PURCHASE -->
			    #{supply_price}, <!-- SUPPLY_PRICE -->
			    #{purchase_state}, <!-- 전표 미승인 상태 , PURCHASE_STATE -->
			    #{condition_note_payable} <!-- CONDITION_NOTE_PAYABLE -->
			   )
		
 	</insert>
 	
 	<insert id="insert_reg_purchase_statement" parameterType="PurchaseDTO">
 		
		INSERT INTO PURCHASE_STATEMENT
      			  ( STATEMENT_ID, PURCHASE_ID, ACCOUNT_ID )
		VALUES
			      ( #{statement_id},	<!-- STATEMENT_ID -->
			       #{purchase_id},	<!-- PURCHASE_ID -->
			       #{account_id} 	<!-- ACCOUNT_ID -->
			      )
	
 	</insert>
 	
 	<!-- STATEMENT_ID 불러오기 -->
 	<select id="select_purchase_order" parameterType="String" resultType="PurchaseDTO">
 		<![CDATA[
		SELECT  *
		FROM    ( 
		        SELECT
		        PURCHASE_ID, 
		        NVL( DECODE
		            ( ACCOUNT_ID,
		              '500011050000','상품매입',
		              '500011030000','부가세예수금',
		              '500012010000','매입채무' )
		              ,'입력값 오류' ) AS ACCOUNT_NAME,
		        ORDER_ID,
		        NVL(( 
		          SELECT  PRODUCT_NAME
		          FROM    PRODUCT
		          WHERE   PO.PRODUCT_ID = PRODUCT.PRODUCT_ID )
		         ,'입력값 오류' ) AS PRODUCT_NAME,
		        NVL(( 
		          SELECT  COMPANY_NAME
		          FROM    COMPANY
		          WHERE   PO.COMPANY_ID = COMPANY.COMPANY_ID )
		         ,'입력값 오류' ) AS COMPANY_NAME,
		        NVL(( 
		          SELECT  EMPLOYEE_NAME
		          FROM    EMPLOYEE
		          WHERE   PO.EMPLOYEE_ID = EMPLOYEE.EMPLOYEE_ID )
		         ,'입력값 오류' ) AS EMPLOYEE_NAME,
		        REG_DATE, UPDATE_DATE, 
		        STORAGE_IN_DATE, COUNT_PURCHASE,
		        SUPPLY_PRICE, 
		        PURCHASE_STATE,
		        CONDITION_NOTE_PAYABLE,
		        ROWNUM rnum
		        FROM PURCHASE_ORDER PO 
		        WHERE   PO.PURCHASE_ID = #{purchase_id}
			     )
		ORDER 	BY rnum
		]]>
 	</select>
 	
 	
 	<select id="select_reg_purchase"  resultType="PurchaseDTO">
 	<![CDATA[
		SELECT 	*
		FROM 	(
				SELECT 
						STOCK_ORDER_TYPE, 
							NVL(STOCK_ORDER_TYPE ,'입력값 오류' ) AS SALES_ID,
						PRODUCT_ID,
							 NVL(( 
							SELECT  PRODUCT_NAME
							FROM    PRODUCT
							WHERE   S.PRODUCT_ID = PRODUCT.PRODUCT_ID )
							,'입력값 오류' ) AS PRODUCT_NAME,
						EMPLOYEE_ID,
							 NVL(( 
							SELECT  EMPLOYEE_NAME
							FROM    EMPLOYEE E
							WHERE   S.EMPLOYEE_ID = E.EMPLOYEE_ID )
							,'입력값 오류' ) AS EMPLOYEE_NAME,
							REG_DATE, 
							STOCK_STATE,
								 NVL(( 
								SELECT  KOR_NAME
								FROM    STATE S
								WHERE   S.STOCK_STATE = S.CODE )
								,'입력값 오류' ) AS STATE_NAME,
						ROWNUM rnum
				FROM 	STOCK_ORDER S, STORAGE_OUT_ORDER SO
				WHERE 	S.STOCK_ORDER_ID = SO.STOCK_ORDER_ID
				AND 	S.STOCK_STATE=24203
				)
		ORDER 	BY STOCK_ORDER_TYPE DESC;
 	]]>
 	</select>
 	
 	
</mapper>
