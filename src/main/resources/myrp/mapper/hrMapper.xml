<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.pro.myrp.persistence.hr.HRDAO">

 	<!-- 인사코드 그룹 목록보기 -->
 	<select id="select_hr_code_groups" resultType="Hr_code_groupVO">
 		<![CDATA[
 		SELECT	*
 		FROM	hr_code_group
 		]]>
 	</select>
 	
 	<!-- 인사코드 그룹번호로 인사코드 그룹 검색 -->
 	<select id="select_hr_code_group" parameterType="int"
 	resultType="Hr_code_groupVO">
 		<![CDATA[
 		SELECT	*
 		FROM	hr_code_group
 		WHERE	hr_code_group_id = #{hr_code_group_id}
 		]]>
 	</select>
 	
 	<!-- 인사코드 그룹 등록 -->
 	<insert id="insert_base_code_group" parameterType="Hr_code_groupVO">
 		<![CDATA[
 		INSERT INTO hr_code_group(hr_code_group_id,hr_code_group_name,use_state)
 		VALUES(#{hr_code_group_id},#{hr_code_group_name},#{use_state})
 		]]>
 	</insert>

	<!-- 선택된 그룹의 인사코드 목록보기 -->
	<select id="select_hr_codes" parameterType="int"
	resultType="Hr_codeVO">
		<![CDATA[
		SELECT	*
		FROM	hr_code
		WHERE	hr_code_group_id = #{hr_code_group_id}
		]]>
	</select>

	<!-- 사용상태를 조건으로 한 선택그룹의 인사코드 목록보기 -->
	<select id="select_used_hr_codes" parameterType="java.util.Map"
	resultType="Hr_codeVO">
		<![CDATA[
		SELECT	*
		FROM	hr_code
		WHERE	use_state = #{use_state}
		AND		hr_code_group_id = #{hr_code_group_id}
		]]>
	</select>

	<!-- 인사코드 그룹 사용비사용 수정 -->
	<update id="update_hr_code_group" parameterType="java.util.Map">
		<![CDATA[
		UPDATE	hr_code_group
		SET		use_state = #{use_state}
		WHERE	hr_code_group_id = #{hr_code_group_id}
		]]>
	</update>
	
	<!-- 선택된 번호의 인사코드 정보 검색 -->
	<select id="select_hr_code" parameterType="java.util.Map"
	resultType="Hr_codeVO">
		<![CDATA[
		SELECT	*
		FROM	hr_code
		WHERE	hr_code_group_id = #{hr_code_group_id}
		AND		hr_code_id = #{hr_code_id}
		]]>
	</select>
	
	<!-- 선택된 번호의 인사코드명 검색 -->
	<select id="select_hr_code_name" parameterType="java.util.Map"
	resultType="String">
		<![CDATA[
		SELECT	hr_code_name
		FROM	hr_code
		WHERE	hr_code_group_id = #{hr_code_group_id}
		AND		hr_code_id = #{hr_code_id}
		]]>
	</select>
	
	<!-- 인사코드 등록 -->
	<insert id="insert_base_code" parameterType="Hr_codeVO">
		<![CDATA[
		INSERT INTO	hr_code(hr_code_group_id,hr_code_id,hr_code_name,use_state)
		VALUES(#{hr_code_group_id},#{hr_code_id},#{hr_code_name},#{use_state})
		]]>
	</insert>

	<!-- 인사코드 수정 -->
	<update id="update_hr_code" parameterType="Hr_codeVO">
		<![CDATA[
		UPDATE	hr_code
		SET		hr_code_name = #{hr_code_name},
				use_state = #{use_state}
		WHERE	hr_code_group_id = #{hr_code_group_id}
		AND		hr_code_id = #{hr_code_id}
		]]>
	</update>

	<!-- 부서의 총 개수 -->
	<select id="select_dept_cnt" resultType="int">
		<![CDATA[
		SELECT	COUNT(*)
		FROM	department
		]]>
	</select>

	<!-- 부서 목록 보기 -->
	<select id="select_dept_list" parameterType="java.util.Map"
	resultType="DeptVO">
		<![CDATA[
		SELECT  *
		FROM    (SELECT dept_id, dept_name, access_role, use_state,
				rownum rNum
		        FROM    (SELECT *
		                FROM    department
		                ORDER BY dept_id
		                )
		        )
		]]>
		<if test="start != null">
		<if test="end != null">
		<![CDATA[
		WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
		</if>
		</if>	
	</select>

	<!-- 사용상태인 부서 목록 보기 -->
	<select id="select_used_dept_list" parameterType="String"
	resultType="DeptVO">
		<![CDATA[
		SELECT  *
		FROM    (SELECT dept_id, dept_name, access_role, use_state,
				rownum rNum
		        FROM    (SELECT *
		                FROM    department
		                ORDER BY dept_id
		                )
		        )
		WHERE	use_state = #{use_state}
		]]>
	</select>
	
	<!-- 부서번호로 부서 정보 검색 -->
	<select id="select_dept" parameterType="int"
	resultType="DeptVO">
		<![CDATA[
		SELECT	*
		FROM	department
		WHERE	dept_id = #{dept_id}
		]]>
	</select>
	
	<!-- 부서번호로 부서명 검색 -->
	<select id="select_dept_name" parameterType="int"
	resultType="String">
		<![CDATA[
		SELECT	dept_name
		FROM	department
		WHERE	dept_id = #{dept_id}
		]]>
	</select>
	
	<!-- 부서 등록 -->
	<insert id="insert_dept" parameterType="DeptVO">
		<![CDATA[
		INSERT INTO	department(dept_id,dept_name,access_role,use_state)
		VALUES (#{dept_id},#{dept_name},#{access_role},#{use_state})
		]]>
	</insert>

	<!-- 부서 정보 수정 -->
	<update id="update_dept" parameterType="DeptVO">
		<![CDATA[
		UPDATE	department
		SET		dept_name = #{dept_name},
				access_role = #{access_role},
				use_state = #{use_state}
		WHERE	dept_id = #{dept_id}
		]]>
	</update>
	
	<!-- 사원의 총 수 -->
	<select id="select_employee_cnt" parameterType="String" resultType="int">
		<![CDATA[
		SELECT	COUNT(*)
		FROM	(SELECT	*
				FROM	employee
				WHERE	employee_id like '%'||NVL(#{searchStr},employee_id)||'%'
				UNION
				SELECT	*
				FROM	employee
				WHERE	employee_name like '%'||NVL(#{searchStr},employee_name)||'%')
		]]>
	</select>

	<!-- 사원 목롭 보기 -->
	<select id="select_employee_list" parameterType="java.util.Map"
	resultType="EmployeeVO">
		<![CDATA[
		SELECT  *
		FROM    (SELECT employee_id, dept_id, hr_code_group_rank,
				rank_code, employee_name, residence_reg_no, join_date,
				rownum rNum
		        FROM    (SELECT	*
				        FROM	(SELECT *
				                FROM    employee
				                WHERE	employee_id like '%'||NVL(#{searchStr},employee_id)||'%'
								UNION
								SELECT	*
								FROM	employee
								WHERE	employee_name like '%'||NVL(#{searchStr},employee_name)||'%'
		                		)
		                ORDER BY employee_name
		                )
		        )
		WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>
	
	<!-- 사원전체 목록 보기 -->
	<select id="select_employees" resultType="EmployeeVO">
		<![CDATA[
		SELECT	*
		FROM	employee
		]]>
	</select>
	
	<!-- 부서선택시 해당부서 근무 사원 보기 -->
	<select id="select_employee_list_for_dept_id" parameterType="int"
	resultType="EmployeeVO">
		<![CDATA[
		SELECT	*
		FROM	employee
		WHERE	employee_id NOT IN	(SELECT DISTINCT employee_id
									FROM	retired_employee)
		AND		dept_id = #{dept_id}
		]]>
	</select>
	
	<!-- 인사카드 목록 보기 -->
	<select id="select_personnel_card_list" parameterType="java.util.Map"
	resultType="Personnel_card_listDTO">
		<![CDATA[
		SELECT	*
		FROM	(SELECT employee_id, dept_id, hr_code_group_rank, employee_name,
		        rank_code, residence_reg_no, join_date,
		        rownum rNum
		        FROM    (SELECT *
		                FROM    (SELECT employee_id, dept_id, hr_code_group_rank,
		                                rank_code, employee_name, residence_reg_no,
		                                join_date
		                        FROM    employee
		                        WHERE	employee_id like '%'||NVL(#{searchStr},employee_id)||'%'
		                        UNION
		                        SELECT  employee_id, dept_id, hr_code_group_rank,
		                                rank_code, employee_name, residence_reg_no,
		                                join_date
		                        FROM    employee
		                        WHERE	employee_name like '%'||NVL(#{searchStr},employee_name)||'%'
		                        )
		                ORDER BY employee_name
		                )
		        )
		WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>
	
	<!-- 사번으로 사원정보 검색 -->
	<select id="select_employee" parameterType="int"
	resultType="EmployeeVO">
		<![CDATA[
		SELECT	*
		FROM	employee
		WHERE	employee_id = #{employee_id}
		]]>
	</select>
	
	<!-- 인사카드 등록 -->
	<insert id="insert_employee" parameterType="EmployeeVO">
		<![CDATA[
		INSERT INTO employee(employee_id,dept_id,hr_code_group_rank,rank_code,
					employee_name,residence_reg_no,join_date)
		VALUES(#{employee_id},#{dept_id},#{hr_code_group_rank},#{rank_code},
					#{employee_name},#{residence_reg_no},#{join_date})
		]]>
	</insert>
	
	<!-- 인사카드 정보 등록 -->
	<insert id="insert_employee_info" parameterType="Employee_infoVO">
		<![CDATA[
		INSERT INTO employee_info(employee_id,tel,mobile_tel,passport_no,
					email,address,hourly_wage,salary_account)
		VALUES(#{employee_id},#{tel},#{mobile_tel},#{passport_no},
					#{email},#{address},#{hourly_wage},#{salary_account})
		]]>
	</insert>
	
	<!-- 인사카드 정보 수정 -->
	<select id="select_personnel_card" parameterType="int"
	resultType="Personnel_cardDTO">
		<![CDATA[
		SELECT	E.employee_id,E.dept_id,D.dept_name,
				E.hr_code_group_rank,HCG.hr_code_group_name,
				E.rank_code,HC.hr_code_name,
				E.employee_name,E.residence_reg_no,E.join_date,
				EI.tel,EI.mobile_tel,EI.passport_no,EI.email,
				EI.address,EI.hourly_wage,EI.salary_account
		FROM	hr_code HC,hr_code_group HCG,
				department D,employee E,employee_info EI
		WHERE	HC.hr_code_group_id = E.hr_code_group_rank
		AND		HC.hr_code_group_id = HCG.hr_code_group_id
		AND		HC.hr_code_id = E.rank_code
		AND		D.dept_id = E.dept_id
		AND		EI.employee_id = E.employee_id
		AND		E.employee_id = #{employee_id}
		]]>
	</select>
	
	<!-- 인사카드 수정 -->
	<update id="update_employee" parameterType="EmployeeVO">
		<![CDATA[
		UPDATE 	employee
		SET		dept_id = #{dept_id},
				hr_code_group_rank = #{hr_code_group_rank},
				rank_code = #{rank_code},
				employee_name = #{employee_name},
				residence_reg_no = #{residence_reg_no},
				join_date = #{join_date}
		WHERE	employee_id = #{employee_id}
		]]>
	</update>
	
	<!-- 인사카드 정보 수정 -->
	<update id="update_employee_info" parameterType="Employee_infoVO">
		<![CDATA[
		UPDATE	employee_info
		SET		tel = #{tel},
				mobile_tel = #{mobile_tel},
				passport_no = #{passport_no},
				email = #{email},
				address = #{address},
				hourly_wage = #{hourly_wage},
				salary_account = #{salary_account}
		WHERE	employee_id = #{employee_id}
		]]>
	</update>
	
	<!-- 검색어를 사용한 인사발령정보 숫자 검색 -->
	<select id="select_appointment_cnt" parameterType="String"
	resultType="int">
		<![CDATA[
		SELECT	COUNT(*)
		FROM	personnel_appointment
		WHERE	employee_id IN	(SELECT	employee_id
								FROM	employee
								WHERE	employee_id like '%'||NVL(#{searchStr},employee_id)||'%'
								UNION
								SELECT	employee_id
								FROM	employee
								WHERE	employee_name like '%'||NVL(#{searchStr},employee_name)||'%'	
								)
		]]>
	</select>
	
	<!-- 검색어를 사용한 인사발령정보 목록 -->
	<select id="select_hr_appointment_list" parameterType="java.util.Map"
	resultType="Hr_appointment_listDTO">
		<![CDATA[
		SELECT	*
		FROM	(SELECT	employee_id,employee_name,appointment_date,
						hr_code_group_rank,pre_rank,post_rank,
						pre_dept,post_dept,rownum rNum
				FROM	(SELECT	PA.employee_id,E.employee_name,PA.appointment_date,
								PA.hr_code_group_rank,PA.pre_rank,PA.post_rank,
								PA.pre_dept,PA.post_dept
						FROM	personnel_appointment PA , employee E
						WHERE	PA.employee_id = E.employee_id	
						AND		E.employee_id IN	(SELECT	employee_id
													FROM	employee
													WHERE	employee_id like '%'||NVL(#{searchStr},employee_id)||'%'
													UNION
													SELECT	employee_id
													FROM	employee
													WHERE	employee_name like '%'||NVL(#{searchStr},employee_name)||'%'	
													)
						ORDER BY E.employee_name, PA.appointment_date DESC
						)
				)
		WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>
	
	<!-- 인사발령 등록 -->
	<insert id="insert_personnel_appointment"
	parameterType="Personnel_appointmentVO">
		<![CDATA[
		INSERT	INTO	personnel_appointment(employee_id,appointment_date,hr_code_group_rank,pre_rank,post_rank,pre_dept,post_dept)
		VALUES(#{employee_id},#{appointment_date},#{hr_code_group_rank},#{pre_rank},#{post_rank},#{pre_dept},#{post_dept})
		]]>
	</insert>
	
	<!-- 선택된 사원의 최종 발령일자 조회 -->
	<select id="select_appointment_date" parameterType="int"
	resultType="java.sql.Date">
		<![CDATA[
		SELECT	Max(appointment_date)
		FROM	personnel_appointment
		GROUP BY employee_id
		HAVING	employee_id = #{employee_id}
		]]>
	</select>
	
	<!-- 인사발령정보 사원테이블 반영 -->
	<update id="update_employee_appoint" parameterType="java.util.Map">
		<![CDATA[
		UPDATE	employee
		SET		dept_id = #{dept_id},
				rank_code = #{rank_code}
		WHERE	employee_id = #{employee_id}
		]]>
	</update>
	
	<!-- 선택된 사원의 인사발령정보 목록 보기 -->
	<select id="select_appointment" parameterType="int"
	resultType="Hr_appointment_listDTO">
		<![CDATA[
		SELECT	PA.employee_id,E.employee_name,PA.appointment_date,
				PA.hr_code_group_rank,PA.pre_rank,PA.post_rank,
				PA.pre_dept,PA.post_dept
		FROM	personnel_appointment PA , employee E
		WHERE	PA.employee_id = E.employee_id	
		AND		E.employee_id =		(SELECT	employee_id
									FROM	employee
									WHERE	employee_id = #{employee_id}
									)
		ORDER BY E.employee_name, PA.appointment_date DESC 
		]]>
	</select>
	
	<!-- 검색어를 사용한 퇴사자 목록 보기 -->
	<select id="select_retired_employee_list" parameterType="java.util.Map"
	resultType="Retired_EmployeeDTO">
		<![CDATA[
		SELECT	*
		FROM	(SELECT	employee_id, employee_name, dept_id,
						hr_code_group_rank, rank_code, join_date,
						retired_date, retired_reason, rownum rNum
				FROM	(SELECT	E.employee_id, E.employee_name, E.dept_id,
								E.hr_code_group_rank, E.rank_code, 
								E.join_date, RE.retired_date, RE.retired_reason
						FROM	retired_employee RE , employee E
						WHERE	RE.employee_id = E.employee_id
						AND		E.employee_id IN	(SELECT	employee_id
													FROM	employee
													WHERE	employee_id like '%'||NVL(#{searchStr},employee_id)||'%'
													UNION
													SELECT	employee_id
													FROM	employee
													WHERE	employee_name like '%'||NVL(#{searchStr},employee_name)||'%'	
													)
						ORDER BY RE.retired_date DESC
						)
				)
		WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>

	<!-- 검색어를 사용한 인사발령정보 숫자 검색 -->
	<select id="select_retired_employee_cnt" parameterType="String"
	resultType="int">
		<![CDATA[
		SELECT	COUNT(*)
		FROM	retired_employee
		WHERE	employee_id IN	(SELECT	employee_id
								FROM	employee
								WHERE	employee_id like '%'||NVL(#{searchStr},employee_id)||'%'
								UNION
								SELECT	employee_id
								FROM	employee
								WHERE	employee_name like '%'||NVL(#{searchStr},employee_name)||'%'	
								)
		]]>
	</select>
	
	<!-- 퇴사자 등록 -->
	<insert id="insert_retired_employee" parameterType="Retired_employeeVO">
		<![CDATA[
		INSERT INTO retired_employee(employee_id,retired_date,retired_reason)
		VALUES(#{employee_id},#{retired_date},#{retired_reason})
		]]>
	</insert>
	
	<!-- 선택된 사원의 부서변경 -->
	<update id="update_employee_dept_no" parameterType="java.util.Map">
		<![CDATA[
		UPDATE	employee
		SET		dept_id = #{dept_id}
		WHERE	employee_id = #{employee_id}
		]]>
	</update>

	<!-- 선택된 사원의 퇴사정보 이력 보기 -->
	<select id="select_retired_employee_history" parameterType="int"
	resultType="Retired_EmployeeDTO">
		<![CDATA[
		SELECT	E.employee_id, E.employee_name, E.dept_id,
				E.hr_code_group_rank, E.rank_code, 
				E.join_date, RE.retired_date, RE.retired_reason
		FROM	retired_employee RE , employee E
		WHERE	RE.employee_id = E.employee_id
		AND		E.employee_id = #{employee_id}
		ORDER BY RE.retired_date DESC
		]]>
	</select>
	
	<select id="select_retired_employee" parameterType="int"
	resultType="Retired_EmployeeDTO">
		<![CDATA[
		SELECT	E.employee_id, E.employee_name, E.dept_id,
				E.hr_code_group_rank, E.rank_code, 
				E.join_date, RE.retired_date, RE.retired_reason
		FROM	retired_employee RE , employee E
		WHERE	RE.employee_id = E.employee_id
		AND		E.employee_id = #{employee_id}
		ORDER BY RE.retired_date DESC
		]]>
	</select>
	
	<!-- 검색어를 반영한 급여대장 개수 검색 -->
	<select id="select_salary_register_cnt" parameterType="java.util.Map"
	resultType="int">
		<![CDATA[
		SELECT	COUNT(*)
		FROM	salary_register
		WHERE	salary_register_name = 	CASE #{salary_register_name}
			                            WHEN '0' THEN salary_register_name
			                            ELSE #{salary_register_name}
			                            END
		AND		pay_date BETWEEN #{search_start} AND #{search_end}
		]]>
	</select>
	
	<!-- 검색어를 반영한 급여대장 정보 조회 -->
	<select id="select_salary_register_list" parameterType="java.util.Map"
	resultType="Salary_registerVO">
		<![CDATA[
		SELECT  *
		FROM    (SELECT SALARY_REGISTER_ID,ACCOUNT_ID,REG_DATE,SALARY_REGISTER_NAME,
		                PAY_DATE,TOTAL_PAY,TOTAL_EMPLOYEE,SALARY_STATE, rownum rNum
		        FROM    (SELECT *
		                FROM	salary_register
		                WHERE	salary_register_name = 	CASE #{salary_register_name}
		                                                WHEN '0' THEN salary_register_name
		                                                ELSE #{salary_register_name}
		                                                END
		                AND		pay_date >= #{search_start} AND pay_date <= #{search_end}
		                ORDER BY SALARY_REGISTER_ID DESC)
		        )
		WHERE   rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>
	
	<!-- 급여정보 등록 -->
	<insert id="insert_salary_register" parameterType="Salary_registerVO">
		<![CDATA[
		INSERT INTO salary_register(salary_register_id,account_id,reg_date,
					salary_register_name,pay_date,total_pay,total_employee,
					salary_state)
		VALUES('6000'||TO_CHAR(SYSDATE,'yyMMdd')||LPAD(salary_seq.nextval,2,'0'),
					#{account_id},#{reg_date},#{salary_register_name},
					#{pay_date},#{total_pay},#{total_employee},#{salary_state})
		]]>
	</insert>
	
	<!-- 급여정보 등록2 -->
	<insert id="insert_salary_register2" parameterType="Salary_registerVO">
		<![CDATA[
		INSERT INTO salary_register(salary_register_id,account_id,reg_date,
					salary_register_name,pay_date,total_pay,total_employee,
					salary_state)
		VALUES('6000'||TO_CHAR(SYSDATE,'yyMMdd')||LPAD(salary_seq.currval,2,'0'),
					#{account_id},#{reg_date},#{salary_register_name},
					#{pay_date},#{total_pay},#{total_employee},#{salary_state})
		]]>
	</insert>
	
	<!-- 승인된 회계전표 조회 -->
	<select id="select_statements_approval"
	resultType="Order_stateVO">
		<![CDATA[
		SELECT	*
		FROM 	order_state
		WHERE	order_state = 25452
		]]>
	</select>
	
	<!-- 회계전표번호와 연결된 급여전표 목록 조회 -->
	<select id="select_salary_statement" parameterType="String"
	resultType="Salary_register_statementVO">
		<![CDATA[
		SELECT	*
		FROM	salary_register_statement
		WHERE	statement_id = #{statement_id}
		]]>
	</select>
	
	<!-- 선택된 급여대장번호의 급여대장 정보를 조회 -->
	<select id="select_salary_register" parameterType="java.util.Map"
	resultType="Salary_registerVO">
		<![CDATA[
		SELECT	*
		FROM	salary_register
		WHERE	salary_register_id = #{salary_register_id}
		AND		account_id = #{account_id}
		]]>
	</select>
	
	<!-- 선택된 급여대장의 급여대장 상태를 변경 -->
	<update id="update_salary_register_state" parameterType="java.util.Map">
		<![CDATA[
		UPDATE	salary_register
		SET		salary_state = #{salary_state}
		WHERE	salary_register_id = #{salary_register_id}
		AND		account_id = #{account_id}
		]]>
	</update>
	
	<!-- 지급대기상태인 급여대장 목록 조회 -->
	<select id="select_salary_register_for_clear"
	resultType="Salary_registerVO">
		<![CDATA[
		SELECT	*
		FROM	salary_register
		WHERE	salary_state = 26452
		AND		account_id = 500014010000
		]]>
	</select>
	
	<!-- 급여통장의 돈을 변경 -->
	<update id="update_bank_account_balance" parameterType="long">
		<![CDATA[
		UPDATE	bank_account
		SET		bank_account_balance = bank_account_balance - #{pay_money}
		WHERE	bank_account_id = 500014010000
		]]>
	</update>
	
	<!-- 선택된 주문의 주문상태를 초기화 -->
	<update id="update_order_state" parameterType="java.util.Map">
		<![CDATA[
		UPDATE	order_state
		SET		order_state = 0
		WHERE	order_id = #{statement_id}
		]]>
	</update>
	
	<!-- 급여대장 정보 수정 -->
	<update id="update_salary_register" parameterType="Salary_registerVO">
		UPDATE	salary_register
		<set>
			<if test="reg_date != null">reg_date = #{reg_date},</if>
			<if test="salary_register_name != null">salary_register_name = #{salary_register_name},</if>
			<if test="pay_date != null">pay_date = #{pay_date},</if>
			<if test="total_pay != null">total_pay = #{total_pay},</if>
			<if test="total_employee != null">total_employee = #{total_employee},</if>
			<if test="salary_state != null">salary_state = #{salary_state}</if>
		</set>	
		WHERE	salary_register_id = #{salary_register_id}
		AND		account_id = #{account_id}
	</update>
	
	<!-- 급여계산용 인사정보 -->
	<select id="select_calc_salary" resultType="Calc_salaryDTO">
		<![CDATA[
		SELECT	*
		FROM	(SELECT	D.dept_id, D.dept_name, E.employee_id, E.employee_name
				FROM	employee E, department D
				WHERE	E.dept_id = D.dept_id
				AND		E.employee_id NOT IN	(SELECT employee_id
												FROM	retired_employee)
				AND		D.use_state = 'Y'
				ORDER BY dept_id ASC)
		]]>
	</select>
	
	<!-- 개인급여정보 등록 -->
	<insert id="insert_salary" parameterType="SalaryVO">
		<![CDATA[
		INSERT INTO salary(salary_register_id,account_id,employee_id,
					base_pay,bonus,benefit,cost,total_pay,deduction_cost,takehome_pay)
		VALUES(#{salary_register_id},#{account_id},#{employee_id},#{base_pay},#{bonus},
		#{benefit},#{cost},#{total_pay},#{deduction_cost},#{takehome_pay})
		]]>
	</insert>
	
	<!-- 급여확정유무 확인 -->
	<select id="select_fixed_salary" parameterType="java.util.Map"
	resultType="int">
		<![CDATA[
		SELECT	COUNT(*)
		FROM	salary
		WHERE	salary_register_id = #{salary_register_id}
		AND		account_id = #{account_id}
		AND		employee_id = #{employee_id}
		]]>
	</select>
	
	<!-- 개인급여정보 조회 -->
	<select id="select_salary" parameterType="java.util.Map"
	resultType="SalaryVO">
		<![CDATA[
		SELECT	*
		FROM	salary
		WHERE	salary_register_id = #{salary_register_id}
		AND		account_id = #{account_id}
		AND		employee_id = #{employee_id}
		]]>
	</select>
	
	<!-- 개인별 인사카드 급여이럭 조회 -->
	<select id="select_personnel_card_salary" parameterType="int"
	resultType="Personnel_card_salaryDTO">
		<![CDATA[
		SELECT	SR.salary_register_id,SR.reg_date,SR.salary_register_name,
				S.employee_id,S.base_pay,S.bonus,S.benefit,S.cost,S.total_pay,
				S.deduction_cost,S.takehome_pay
		FROM	salary S, salary_register SR
		WHERE	S.salary_register_id = SR.salary_register_id
		AND		S.account_id = SR.account_id
		AND		S.employee_id = #{employee_id}
		ORDER BY SR.reg_date DESC
		]]>
	</select>
</mapper>