<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.pro.myrp.persistence.account.AccountDAO">
 
 	<!-- 계좌 총 개수 -->
 	<select id="select_bank_account_cnt" resultType="int">
 		<![CDATA[
 			SELECT COUNT(*)
 			FROM   bank_account
 		]]>
 	</select>
 	<!-- 계좌 목록 -->
 	<select id="select_bank_account_list" parameterType="java.util.Map"
 	resultType="Bank_accountVO">
 		<![CDATA[
 			SELECT *
 			FROM ( SELECT bank_account_id, bank_account_name, bank_account_number,
 						  bank_account_balance, bank_account_type, bank_name,
 						  use_state, reg_date, rownum rNum
 				     FROM ( select *
 				     	    FROM bank_account
 				     	    ORDER BY bank_account_name
 				     	   )
 				 )
 			WHERE rNum >= #{start} AND rNum <= #{end}
 		]]>
 	</select>
 	
 	<!-- bank_account_id 불러오기 -->
 	<select id="select_bank_account_id" resultType="AccountVO">
 		<![CDATA[
 		 SELECT account_id, account_name, account_balance FROM account 
          WHERE account_name IN('매출채권','매입채무','급여','부가세예수금','현금') 
          AND account_id NOT IN(SELECT bank_account_id FROM bank_account)
 		]]>
 	</select>
 	
 	<!-- 계좌 추가 -->
 	<insert id="insert_bank_account" parameterType="Bank_accountVO">
 		<![CDATA[
 		INSERT INTO bank_account
 		values(#{bank_account_id},#{bank_account_name},#{bank_account_number},
 			   #{bank_account_balance},#{bank_account_type},#{bank_name},#{use_state},
 			   CASE	WHEN	TO_CHAR(#{reg_date},'YYYY') < 2000
								THEN	SYSDATE
								ELSE	#{reg_date}
								END	
			  )
 		]]>
 	</insert>
 	
 	<!-- 계좌 수정정보 불러오기 -->
 	<select id="select_bank_account" parameterType="String" resultType="Bank_accountVO">
 		<![CDATA[
 		SELECT *
 		FROM bank_account
 		WHERE bank_account_id = #{bank_account_id}
 		]]>
 	</select>
 	
 	<!-- 계좌 수정 처리 -->
 	<update id="update_bank_account" parameterType="Bank_accountVO">
 		<![CDATA[
 		UPDATE bank_account 
 		   SET bank_account_name = #{bank_account_name}, bank_account_number = #{bank_account_number}, bank_name = #{bank_name}, use_state = #{use_state}, reg_date = #{reg_date}
 		 WHERE bank_account_id = #{bank_account_id}
 		]]>
 	</update>
 	
 	<!-- 전표 총 개수 -->
 	<select id="select_statements_cnt" resultType="int">
 		<![CDATA[
 		SELECT COUNT(*)
 		  FROM statement
 		]]>
 	</select>
 	
 	<!-- 전표 가져오기 -->
 	<select id="select_statements" parameterType="java.util.Map"
 	resultType="JoinStatementDTO">
 		<![CDATA[
 		SELECT * 
 		FROM (
 			SELECT statement_id, sales_id, salary_register_id, purchase_id, 
 						  tax_account_id, sales_account_id, purchase_account_id, salary_account_id,
						  reg_date, account_value, approval_state, statement_type, rownum rNum
 			FROM ( SELECT s.statement_id, sales.sales_id, salary.salary_register_id, purc.purchase_id, 
 						  tax.account_id as tax_account_id, sales.account_id as sales_account_id, purc.account_id as purchase_account_id, salary.account_id as salary_account_id,
						  s.reg_date, s.account_value, s.approval_state, s.statement_type
 				     FROM statement s left outer JOIN sales_statement sales ON s.statement_id = sales.statement_id 
 				     	  			  left outer JOIN purchase_statement purc ON s.statement_id = purc.statement_id
 				     	  			  left outer JOIN salary_register_statement salary ON s.statement_id = salary.statement_id
 				     	  			  left outer JOIN tax_statement tax ON s.statement_id = tax.statement_id
 				     ORDER BY s.reg_date DESC
 				  )
 			)
 		WHERE rNum >= #{start} AND rNum <= #{end}
 		]]>
 	</select>
 	
 	<!-- 전표 상세 내용 가져오기 > 디테일, account_name 가져오기  -->
 	<select id="select_statement_detail" parameterType="java.util.Map" resultType="JoinStatementDTO">
 		<if test="typeCnt == 1"> <!-- sales -->
 		<![CDATA[
 		 SELECT s.statement_id, s.statement_type, s.reg_date, sales.account_id, s.account_value, sales.sales_id, s.approval_state, a.account_name
      	   FROM statement s left outer JOIN sales_statement sales ON s.statement_id = sales.statement_id 
                            left outer JOIN account a ON sales.account_id = a.account_id
          WHERE sales.sales_id = #{sales_id} AND s.statement_type = (SELECT statement_type FROM statement WHERE statement_id = #{statement_id})
 		]]>
 		</if>
 		<if test="typeCnt == 2"> <!-- purchase -->
 		<![CDATA[
 		 SELECT s.statement_id, s.statement_type, s.reg_date, purc.account_id, s.account_value, purc.purchase_id, s.approval_state, a.account_name
      	   FROM statement s left outer JOIN purchase_statement purc ON s.statement_id = purc.statement_id
                            left outer JOIN account a ON purc.account_id = a.account_id
          WHERE purc.purchase_id = #{purchase_id} AND s.statement_type = (SELECT statement_type FROM statement WHERE statement_id = #{statement_id})
 		]]>
 		</if>
 		<if test="typeCnt == 3"> <!-- salary -->
 		<![CDATA[
 		 SELECT s.statement_id, s.statement_type, s.reg_date, salary.account_id, s.account_value, salary.salary_register_id, s.approval_state, a.account_name
      	   FROM statement s left outer JOIN salary_register_statement salary ON s.statement_id = salary.statement_id
                            left outer JOIN account a ON salary.account_id = a.account_id
          WHERE salary.salary_register_id = #{salary_register_id} AND s.statement_type = (SELECT statement_type FROM statement WHERE statement_id = #{statement_id})
 		]]>
 		</if>
 		<if test="typeCnt == 4"> <!-- tax -->
 		<![CDATA[
 		 SELECT s.statement_id, s.statement_type, s.reg_date, tax.account_id, s.account_value, s.approval_state, a.account_name
      	   FROM statement s left outer JOIN tax_statement tax ON s.statement_id = tax.statement_id
                            left outer JOIN account a ON tax.account_id = a.account_id
          WHERE s.statement_type = (SELECT statement_type FROM statement WHERE statement_id = #{statement_id})
 		]]>
 		</if>
 		
 	</select>
 	<!-- 전표 상세 내용 가져오기 > company_name 가져오기  -->
 	<select id="select_detail_company_name" parameterType="java.util.Map" resultType="String">
 		<if test="typeCnt == 1">
 		<![CDATA[
 		SELECT DISTINCT c.company_name
 		  FROM company c JOIN (SELECT company_id FROM sales_order WHERE sales_id = #{sales_id}) s 
 		                 ON c.company_id = s.company_id 
 		]]>
 		</if>
 		<if test="typeCnt == 2">
 		<![CDATA[
 		SELECT DISTINCT c.company_name
 		  FROM company c JOIN (SELECT company_id FROM purchase_order WHERE purchase_id = #{purchase_id}) p 
 		                 ON c.company_id = p.company_id 
 		]]>
 		</if>
 		<if test="typeCnt == 3">
 		<![CDATA[
 		SELECT '급여' FROM dual
 		]]>
 		</if>
 		<if test="typeCnt == 4">
 		SELECT '세무청' FROM dual
 		</if>
 	</select>
 	<!-- 전표관리 > 전표 승인 > statement cnt 가져오기 -->
	<select id="select_statement_cnt" parameterType="String" resultType="int">
		<![CDATA[
		SELECT COUNT(*)
		FROM (SELECT * FROM statement WHERE 
          connected_id=(SELECT connected_id FROM statement WHERE statement_id = #{statement_id}) AND 
          statement_type=(SELECT statement_type FROM statement WHERE statement_id = #{statement_id}))
		]]>
	</select>
	<!-- 전표관리 > 전표 승인 > 해당하는 거래의 전표 코드 가져오기 -->
	<select id="select_statement_ids" parameterType="String" resultType="StatementVO">
		<![CDATA[
		SELECT *
		FROM (SELECT * FROM statement WHERE 
          connected_id=(SELECT connected_id FROM statement WHERE statement_id = #{statement_id}) AND 
          statement_type=(SELECT statement_type FROM statement WHERE statement_id = #{statement_id}))
		]]>
	</select>
 	<!-- 전표관리 > 전표 승인 > approval_state 변경 -->
 	<update id="update_statement_approval_state" parameterType="java.util.Map">
 		<![CDATA[
 		UPDATE statement SET approval_state = '25452'
 		WHERE statement_id = #{statement_id}
 		]]>
 	</update>
 	<!-- 전표관리 > 전표 승인 > account balance 변경 -->
 	<update id="update_account_account_value" parameterType="java.util.Map">
 		<if test="typeCnt == 1">
 		<![CDATA[
 		UPDATE account SET account_balance = account_balance + (SELECT account_value FROM statement WHERE statement_id = #{statement_id})
 		 WHERE account_id = (SELECT account_id FROM sales_statement WHERE statement_id =#{statement_id})
 		]]>
 		</if>
 		<if test="typeCnt == 2">
 		<![CDATA[
 		UPDATE account SET account_balance = account_balance + (SELECT account_value FROM statement WHERE statement_id = #{statement_id})
 		 WHERE account_id = (SELECT account_id FROM purchase_statement WHERE statement_id =#{statement_id})
 		]]>
 		</if>
 		<if test="typeCnt == 3">
 		<![CDATA[
 		UPDATE account SET account_balance = account_balance + (SELECT account_value FROM statement WHERE statement_id = #{statement_id})
 		 WHERE account_id = (SELECT account_id FROM salary_register_statement WHERE statement_id =#{statement_id})
 		]]>
 		</if>
 		<if test="typeCnt == 4">
 		<![CDATA[
 		UPDATE account SET account_balance = account_balance + (SELECT account_value FROM statement WHERE statement_id = #{statement_id})
 		 WHERE account_id = (SELECT account_id FROM tax_statement WHERE statement_id = #{statement_id})
 		]]>
 		</if>
 	</update>
 	<!-- 전표 아이디로 connected_id 가져오기-->
 	<select id="select_connected_id" parameterType="String" resultType="String">
 		<![CDATA[
 		 SELECT sales.sales_id, salary.salary_register_id, purc.purchase_id
 		   FROM statement s left outer JOIN sales_statement sales ON s.statement_id = sales.statement_id 
                            left outer JOIN purchase_statement purc ON s.statement_id = purc.statement_id
 				     	    left outer JOIN salary_register_statement salary ON s.statement_id = salary.statement_id
 				     	    left outer JOIN tax_statement tax ON s.statement_id = tax.statement_id
 		  WHERE s.statement_id= #{statement_id}
 		]]>
 	</select>
 	<!-- 전표관리 > 전표 승인 > approval_state 변경 -->
 	<update id="update_statement_disapproval_state" parameterType="java.util.Map">
 		<![CDATA[
 		UPDATE statement SET approval_state = '25453'
 		WHERE statement_id = #{statement_id}
 		]]>
 	</update>
 	
 	<!-- 미승인 전표 총 개수 -->
 	<select id="select_unapproval_statements_cnt" resultType="int">
 		<![CDATA[
 		SELECT COUNT(*)
 		  FROM statement
 		 WHERE approval_state = '25451'
 		]]>
 	</select>
 	
 	<!-- 미승인 전표 가져오기 -->
 	<select id="select_unapproval_statements" parameterType="java.util.Map"
 	resultType="JoinStatementDTO">
 		<![CDATA[
 		SELECT * 
 		FROM (
 			SELECT statement_id, sales_id, salary_register_id, purchase_id, 
 						  tax_account_id, sales_account_id, purchase_account_id, salary_account_id,
						  reg_date, account_value, approval_state, statement_type, rownum rNum
 			FROM ( SELECT s.statement_id, sales.sales_id, salary.salary_register_id, purc.purchase_id, 
 						  tax.account_id as tax_account_id, sales.account_id as sales_account_id, purc.account_id as purchase_account_id, salary.account_id as salary_account_id,
						  s.reg_date, s.account_value, s.approval_state, s.statement_type
 				     FROM statement s left outer JOIN sales_statement sales ON s.statement_id = sales.statement_id 
 				     	  			  left outer JOIN purchase_statement purc ON s.statement_id = purc.statement_id
 				     	  			  left outer JOIN salary_register_statement salary ON s.statement_id = salary.statement_id
 				     	  			  left outer JOIN tax_statement tax ON s.statement_id = tax.statement_id
 				     WHERE s.approval_state = '25451'
 				     ORDER BY s.reg_date DESC
 				  )
 			)
 		 WHERE rNum >= #{start} AND rNum <= #{end}
 		]]>
 	</select>
 	
 	<!-- 승인 전표 총 개수 -->
 	<select id="select_approval_statements_cnt" resultType="int">
 		<![CDATA[
 		SELECT COUNT(*)
 		  FROM statement
 		 WHERE approval_state = '25452'
 		]]>
 	</select>
 	
 	<!-- 승인 전표 가져오기 -->
 	<select id="select_approval_statements" parameterType="java.util.Map"
 	resultType="JoinStatementDTO">
 		<![CDATA[
 		SELECT * 
 		FROM (
 			SELECT statement_id, sales_id, salary_register_id, purchase_id, 
 						  tax_account_id, sales_account_id, purchase_account_id, salary_account_id,
						  reg_date, account_value, approval_state, statement_type, rownum rNum
 			FROM ( SELECT s.statement_id, sales.sales_id, salary.salary_register_id, purc.purchase_id, 
 						  tax.account_id as tax_account_id, sales.account_id as sales_account_id, purc.account_id as purchase_account_id, salary.account_id as salary_account_id,
						  s.reg_date, s.account_value, s.approval_state, s.statement_type
 				     FROM statement s left outer JOIN sales_statement sales ON s.statement_id = sales.statement_id 
 				     	  			  left outer JOIN purchase_statement purc ON s.statement_id = purc.statement_id
 				     	  			  left outer JOIN salary_register_statement salary ON s.statement_id = salary.statement_id
 				     	  			  left outer JOIN tax_statement tax ON s.statement_id = tax.statement_id
 				     WHERE s.approval_state = '25452'
 				     ORDER BY s.reg_date DESC
 				  )
 			)
 		 WHERE rNum >= #{start} AND rNum <= #{end}
 		]]>
 	</select>
 	<!-- connected_id 불러오기 : sales -->
 	<select id="select_sales_statement" resultType="JoinStatementDTO">
 		<![CDATA[
 		SELECT s.sales_id, s.account_id, a.account_name, (s.count_sales*s.selling_price)as account_value, s.reg_date
 		  FROM sales_order s JOIN account a ON s.account_id = a.account_id
 		  WHERE s.sales_id NOT IN (SELECT so.sales_id FROM sales_order so JOIN sales_statement st ON so.sales_id=st.sales_id AND so.account_id=st.account_id)
 		  ORDER BY s.sales_id
 		]]>
 	</select>
 	<!-- connected_id 불러오기 : purchase-->
 	<select id="select_purchase_statement" resultType="JoinStatementDTO">
 		<![CDATA[
 		 SELECT p.purchase_id, p.account_id, a.account_name,(p.count_purchase*p.supply_price)as account_value, p.reg_date
 		  FROM purchase_order p JOIN account a ON p.account_id = a.account_id
 		  WHERE p.purchase_id NOT IN (SELECT po.purchase_id FROM purchase_order po JOIN purchase_statement pt ON po.purchase_id=pt.purchase_id AND po.account_id=pt.account_id)
 		  ORDER BY p.purchase_id
 		]]>
 	</select>
 	<!-- connected_id 불러오기 : salary -->
 	<select id="select_salary_statement" resultType="JoinStatementDTO">
 		<![CDATA[
 		SELECT s.salary_register_id, s.account_id, a.account_name, s.total_pay as account_value, s.reg_date
 		FROM salary_register s JOIN account a ON s.account_id = a.account_id
 		WHERE s.salary_register_id NOT IN (SELECT sr.salary_register_id FROM salary_register sr JOIN salary_register_statement st ON sr.salary_register_id=st.salary_register_id AND sr.account_id=st.account_id)
 		ORDER BY s.salary_register_id
 		]]>
 	</select>
 	<!-- connected_id 불러오기 : tax - tax의 경우 account_id 만 받아온다 -->
 	<select id="select_tax_statement" resultType="JoinStatementDTO">
 		<![CDATA[
 		SELECT account_id, account_name, account_balance as account_value FROM account 
 		WHERE account_id IN ('500012020000', '500011030000') AND account_balance > 0
 		]]>
 	</select>
 	<!-- 전표생성 -->
 	<insert id="insert_statement" parameterType="StatementVO">
 		<![CDATA[
 		
 		
 		INSERT INTO statement VALUES(
 		('5470'||TO_CHAR((SELECT sysdate FROM dual),'YYMMDD')||LPAD(statement_seq.NEXTVAL,2,0)),
 		sysdate,#{account_value},'25451',#{statement_type})
 		]]>
 	</insert>
 	
 	<!-- 커넥트 전표 생성 -->
 	<insert id="insert_connected_statement" parameterType="JoinStatementDTO">
 		<if test ="sales_id!=null">
 		<![CDATA[
 		INSERT INTO sales_statement VALUES(
 		('5470'||TO_CHAR((SELECT sysdate FROM dual),'YYMMDD')||LPAD(statement_seq.CURRVAL,2,0)),
 		#{sales_id},#{account_id})
 		]]>
 		</if>
 		<if test ="purchase_id!=null">
 		<![CDATA[
 		INSERT INTO purchase_statement VALUES(
 		('5470'||TO_CHAR((SELECT sysdate FROM dual),'YYMMDD')||LPAD(statement_seq.CURRVAL,2,0)),
 		#{purchase_id},#{account_id})
 		]]>
 		</if>
 		<if test ="salary_register_id!=null">
 		<![CDATA[
 		INSERT INTO salary_register_statement VALUES(
 		('5470'||TO_CHAR((SELECT sysdate FROM dual),'YYMMDD')||LPAD(statement_seq.CURRVAL,2,0)),
 		#{salary_register_id},#{account_id})
 		]]>
 		</if>
 		<if test ="sales_id==null">
 			<if test= "purchase_id==null">
 				<if test= "salary_register_id==null">
 		<![CDATA[
 		INSERT INTO tax_statement VALUES(
 		('5470'||TO_CHAR((SELECT sysdate FROM dual),'YYMMDD')||LPAD(statement_seq.CURRVAL,2,0)), #{account_id})
 		]]>
 				</if>
 			</if>
 		</if>
 	</insert>
 	<!-- 같은 connected_id 가진 관련전표 내용 가져오기 -->
 	<select id="select_same_id_sales_statement" parameterType="String" resultType="JoinStatementDTO">
 		<![CDATA[
 		 SELECT s.sales_id, s.account_id, a.account_name, (s.count_sales*s.selling_price)as account_value, s.reg_date
 		 FROM sales_order s JOIN account a ON s.account_id = a.account_id
    	 WHERE sales_id = #{sales_id}
 		]]>
 	</select>
 	<select id="select_same_id_purchase_statement" parameterType="String" resultType="JoinStatementDTO">
 		<![CDATA[
 		 SELECT p.purchase_id, p.account_id, a.account_name,(p.count_purchase*p.supply_price)as account_value, p.reg_date
 		 FROM purchase_order p JOIN account a ON p.account_id = a.account_id
    	 WHERE purchase_id = #{purchase_id}
 		]]>
 	</select>
 	<select id="select_same_id_salary_statement" parameterType="String" resultType="JoinStatementDTO">
 		<![CDATA[
 		 SELECT s.salary_register_id, s.account_id, a.account_name, s.total_pay as account_value, s.reg_date
 		  FROM salary_register s JOIN account a ON s.account_id = a.account_id
    	 WHERE salary_register_id = #{salary_register_id}
 		]]>
 	</select>
 	<select id="select_same_type_tax" parameterType="String" resultType="JoinStatementDTO">
 		<![CDATA[
 		SELECT account_id, account_name, account_balance as account_value FROM account 
 		WHERE account_id = #{account_id}
 		]]>
 	</select>
 	
 	<!-- 승인할 전표가 가진 계정이 은행이 있어야하는지 확인 -->
 	<select id="select_check_account_id_with_statement_id" parameterType="java.util.Map" resultType="int">
 		<if test="typeCnt == 1">
 		<![CDATA[
 		SELECT COUNT(*) FROM (SELECT statement_id FROM sales_statement 
                      WHERE account_id IN(500011020000, 500012010000, 500014010000, 500012020000, 500011010000))
		WHERE statement_id = #{statement_id}
 		]]>
 		</if>
 		<if test="typeCnt == 2">
 		<![CDATA[
 		SELECT COUNT(*) FROM (SELECT statement_id FROM purchase_statement 
                      WHERE account_id IN(500011020000, 500012010000, 500014010000, 500012020000, 500011010000))
		WHERE statement_id = #{statement_id}
 		]]>
 		</if>
 		<if test="typeCnt == 3">
 		<![CDATA[
 		SELECT COUNT(*) FROM (SELECT statement_id FROM salary_register_statement 
                      WHERE account_id IN(500011020000, 500012010000, 500014010000, 500012020000, 500011010000))
		WHERE statement_id = #{statement_id}
 		]]>
 		</if>
 		<if test="typeCnt == 4">
 		<![CDATA[
 		SELECT COUNT(*) FROM (SELECT statement_id FROM tax_statement 
                      WHERE account_id IN(500011020000, 500012010000, 500014010000, 500012020000, 500011010000))
		WHERE statement_id = #{statement_id}
 		]]>
 		</if>
 	</select>
 	<!-- 승인할 전표가 가진 계정이 은행이 있어야하는데, 그것의 계좌가 있는지 확인 -->
 	<select id="select_check_excist" parameterType="java.util.Map" resultType="int">
 		<if test="typeCnt == 1">
 		<![CDATA[
 		 SELECT COUNT(*) FROM bank_account 
 		 WHERE bank_account_id = (SELECT account_id FROM sales_statement WHERE statement_id = #{statement_id})
 		 	   AND use_state = 'Y'
 		]]>
 		</if>
 		<if test="typeCnt == 2">
 		<![CDATA[
 		 SELECT COUNT(*) FROM bank_account 
 		 WHERE bank_account_id = (SELECT account_id FROM purchase_statement WHERE statement_id = #{statement_id})
 		 	   AND use_state = 'Y'
 		]]>
 		</if>
 		<if test="typeCnt == 3">
 		<![CDATA[
 		 SELECT COUNT(*) FROM bank_account 
 		 WHERE bank_account_id = (SELECT account_id FROM salary_register_statement WHERE statement_id = #{statement_id})
 		 	   AND use_state = 'Y'
 		]]>
 		</if>
 		<if test="typeCnt == 4">
 		<![CDATA[
 		 SELECT COUNT(*) FROM bank_account 
 		 WHERE bank_account_id = (SELECT account_id FROM tax_statement WHERE statement_id = #{statement_id})
 		 	   AND use_state = 'Y'
 		]]>
 		</if>
 	</select>
 	<!-- 계좌정보 업데이트 -->
 	<update id="update_bank_account_account_value" parameterType="java.util.Map">
 		<if test="typeCnt == 1">
 		<![CDATA[
 		 UPDATE bank_account SET bank_account_balance = bank_account_balance + (SELECT account_value FROM statement WHERE statement_id = #{statement_id})
         WHERE bank_account_id = (SELECT account_id FROM sales_statement WHERE statement_id = #{statement_id})
 		]]>
 		</if>
 		<if test="typeCnt == 2">
 		<![CDATA[
 		UPDATE bank_account SET bank_account_balance = bank_account_balance + (SELECT account_value FROM statement WHERE statement_id = #{statement_id})
        WHERE bank_account_id = (SELECT account_id FROM purchase_statement WHERE statement_id = #{statement_id})                                           
 		]]>
 		</if>
 		<if test="typeCnt == 3">
 		<![CDATA[
 		UPDATE bank_account SET bank_account_balance = bank_account_balance + (SELECT account_value FROM statement WHERE statement_id = #{statement_id})
        WHERE bank_account_id = (SELECT account_id FROM salary_register_statement WHERE statement_id = #{statement_id})
 		]]>
 		</if>
 		<if test="typeCnt == 4">
 		<![CDATA[
 		UPDATE bank_account SET bank_account_balance = bank_account_balance + (SELECT account_value FROM statement WHERE statement_id = #{statement_id})
        WHERE bank_account_id = (SELECT account_id FROM tax_statement WHERE statement_id = #{statement_id})
 		]]>
 		</if>
 	</update>
 	<!-- 세금 전표 statement_id 가져오기 -->
 	<select id="select_get_tax_statement_id" resultType="String">
 		<![CDATA[
 		SELECT '5470' || TO_CHAR(sysdate,'YYMMDD') || LPAD(statement_seq.CURRVAL,2,0) FROM dual
 		]]>
 	</select>
 	
 	<!-- 계정 관리 > 계정 리스트 조회 > 계정 갯수 가져오기 -->
 	<select id="select_account_cnt" resultType="int">
 		<![CDATA[
 			SELECT COUNT(*)
 			FROM   account
 		]]>
 	</select>
 	<!-- 계정 관리 > 계정 리스트 조회 > 계정 목록 가져오기 -->
 	<select id="select_account_list" parameterType="java.util.Map" resultType="AccountVO">
 		<![CDATA[
 			SELECT *
 			FROM ( SELECT account_id, account_balance, account_name, rownum rNum
 				     FROM ( select *
 				     	    FROM account
 				     	    ORDER BY account_id
 				     	   )
 				 )
 			WHERE rNum >= #{start} AND rNum <= #{end}
 		]]>
 	</select>
 	
 	<!-- 계정관리 > 계정 추가 > account_id 중복확인 -->
	<select id="select_account" parameterType="String" resultType="AccountVO">
		<![CDATA[
		SELECT	*
		FROM	account
		WHERE	account_id = #{account_id}
		]]>
	</select>
	
	<!-- 계정관리 > 계정추가 처리 -->
	<insert id="insert_account" parameterType="AccountVO">
		<![CDATA[
		INSERT INTO account 
		VALUES(#{account_id}, #{account_balance}, #{account_name})
		]]>
	</insert>
	
	<!-- 계정관리 > 계정수정 -->
	<select id="select_ori_account" parameterType="String" resultType="AccountVO">
		<![CDATA[
		SELECT * FROM account WHERE account_id = #{account_id}
		]]>
	</select>
	
	<!-- 계정관리 > 계정수정 처리 -->
	<update id="update_modify_account" parameterType="AccountVO">
		<![CDATA[
		UPDATE account SET account_name = #{account_name}
		WHERE account_id = #{account_id}
		]]>
	</update>
	
	<!-- 회사가 가진 전표의 년도 모두 가져오기 -->
	<select id="get_statement_year" resultType="JoinStatementDTO">
		SELECT DISTINCT to_number(to_char(reg_date, 'yyyy')) year  FROM statement
	</select>
	<!-- 분기별 계정 가져오기 - account_id, account_name 가져오기 -->
	<select id="select_accounts" resultType="AccountVO">
		<![CDATA[
		 SELECT account_id, account_name FROM account
		]]>
	</select>
	<!-- 분기별 계정 가져오기  - sales-->
	<select id="select_accounts_for_quarter_sales" parameterType="java.util.Map" resultType="Long">
		<![CDATA[
		SELECT SUM(NVL(s.account_value,0)) as sum  FROM statement s JOIN sales_statement ss ON s.statement_id = ss.statement_id 
     	WHERE s.reg_date >= TO_DATE(#{year}||'-'||#{quarter_start},'YYYY-MM') AND s.reg_date <= TO_DATE(#{year}||'-'||#{quarter_end},'YYYY-MM')
     	AND ss.account_id = #{account_id}
     	AND s.APPROVAL_STATE='25452'
     	GROUP BY ss.account_id
		]]>
	</select>
	<!-- 분기별 계정 가져오기  - purchase-->
	<select id="select_accounts_for_quarter_purchase" parameterType="java.util.Map" resultType="Long">
		<![CDATA[
		SELECT SUM(NVL(s.account_value,0)) as sum  FROM statement s JOIN purchase_statement ps ON s.statement_id = ps.statement_id
		WHERE s.reg_date >= TO_DATE(#{year}||'-'||#{quarter_start},'YYYY-MM') AND s.reg_date <= TO_DATE(#{year}||'-'||#{quarter_end},'YYYY-MM')
     	AND ps.account_id = #{account_id}
     	AND s.APPROVAL_STATE='25452'
     	GROUP BY ps.account_id
		]]>
	</select>
	<!-- 분기별 계정 가져오기  - salary-->
	<select id="select_accounts_for_quarter_salary" parameterType="java.util.Map" resultType="Long">
		<![CDATA[
		SELECT SUM(NVL(s.account_value,0)) as sum FROM statement s JOIN salary_register_statement srs ON s.statement_id = srs.statement_id 
		WHERE s.reg_date >= TO_DATE(#{year}||'-'||#{quarter_start},'YYYY-MM') AND s.reg_date <= TO_DATE(#{year}||'-'||#{quarter_end},'YYYY-MM')
     	AND srs.account_id = #{account_id}
     	AND s.APPROVAL_STATE='25452'
     	GROUP BY srs.account_id
		]]>
	</select>
	<!-- 분기별 계정 가져오기  - tax-->
	<select id="select_accounts_for_quarter_tax" parameterType="java.util.Map" resultType="Long">
		<![CDATA[
		SELECT SUM(NVL(s.account_value,0)) as sum FROM statement s JOIN tax_statement tax ON s.statement_id = tax.statement_id 
		WHERE s.reg_date >= TO_DATE(#{year}||'-'||#{quarter_start},'YYYY-MM') AND s.reg_date <= TO_DATE(#{year}||'-'||#{quarter_end},'YYYY-MM')
     	AND tax.account_id = #{account_id}
     	AND s.APPROVAL_STATE='25452'
     	GROUP BY tax.account_id
		]]>
	</select>
	<!-- 매출원가 : 판매량 가져오기 -->
	<select id="select_count_sales" parameterType="java.util.Map" resultType="int">
		<![CDATA[
		SELECT count_sales FROM sales_order WHERE sales_id = #{sales_id} AND account_id = #{account_id}
		]]>
	</select>
	<!-- 매출원가 : 구입원가 가져오기  -->
	<select id="select_purchase_unit_price" parameterType="java.util.Map" resultType="int">
		<![CDATA[
		SELECT purchase_unit_price FROM product WHERE product_id = (SELECT product_id FROM sales_order WHERE sales_id = #{sales_id} AND account_id = #{account_id})
		]]>
	</select>
	<!-- 매출원가 : 매출원가계정 업데이트  -->
	<update id="update_costs_of_goods_sold_account" parameterType="java.util.Map">
		<![CDATA[
		UPDATE account SET account_balance = #{account_value} WHERE account_id = #{account_id} 
		]]>
	</update>
	
	<!-- 날짜별 계정 가져오기  - sales-->
	<select id="select_accounts_for_date_sales" parameterType="java.util.Map" resultType="Long">
		<![CDATA[
		SELECT SUM(NVL(s.account_value,0)) as sum  FROM statement s JOIN sales_statement ss ON s.statement_id = ss.statement_id 
     	WHERE s.reg_date >= TO_DATE(#{startDate},'YYYY-MM-DD') AND s.reg_date <= TO_DATE(#{endDate},'YYYY-MM-DD')
     	AND ss.account_id = #{account_id}
     	AND s.APPROVAL_STATE='25452'
     	GROUP BY ss.account_id
		]]>
	</select>
	<!-- 날짜별 계정 가져오기  - purchase-->
	<select id="select_accounts_for_date_purchase" parameterType="java.util.Map" resultType="Long">
		<![CDATA[
		SELECT SUM(NVL(s.account_value,0)) as sum  FROM statement s JOIN purchase_statement ps ON s.statement_id = ps.statement_id
		WHERE s.reg_date >= TO_DATE(#{startDate},'YYYY-MM-DD') AND s.reg_date <= TO_DATE(#{endDate},'YYYY-MM-DD')
     	AND ps.account_id = #{account_id}
     	AND s.APPROVAL_STATE='25452'
     	GROUP BY ps.account_id
		]]>
	</select>
	<!-- 날짜별 계정 가져오기  - salary-->
	<select id="select_accounts_for_date_salary" parameterType="java.util.Map" resultType="Long">
		<![CDATA[
		SELECT SUM(NVL(s.account_value,0)) as sum FROM statement s JOIN salary_register_statement srs ON s.statement_id = srs.statement_id 
		WHERE s.reg_date >= TO_DATE(#{startDate},'YYYY-MM-DD') AND s.reg_date <= TO_DATE(#{endDate},'YYYY-MM-DD')
     	AND srs.account_id = #{account_id}
     	AND s.APPROVAL_STATE='25452'
     	GROUP BY srs.account_id
		]]>
	</select>
	<!-- 날별 계정 가져오기  - tax-->
	<select id="select_accounts_for_date_tax" parameterType="java.util.Map" resultType="Long">
		<![CDATA[
		SELECT SUM(NVL(s.account_value,0)) as sum FROM statement s JOIN tax_statement tax ON s.statement_id = tax.statement_id 
		WHERE s.reg_date >= TO_DATE(#{startDate},'YYYY-MM-DD') AND s.reg_date <= TO_DATE(#{endDate},'YYYY-MM-DD')
     	AND tax.account_id = #{account_id}
     	AND s.APPROVAL_STATE='25452'
     	GROUP BY tax.account_id
		]]>
	</select>
	
	<!-- 손익계산서 > 매출원가  : sales_id 가져오기  -->
	<select id="select_sales_id" parameterType="java.util.Map" resultType="JoinStatementDTO">
		<![CDATA[
		SELECT ss.sales_id  FROM statement s JOIN sales_statement ss ON s.statement_id = ss.statement_id
    	WHERE s.reg_date >= TO_DATE(#{startDate},'YYYY-MM-DD') AND s.reg_date <= TO_DATE(#{endDate},'YYYY-MM-DD')
        AND s.APPROVAL_STATE='25452' AND ss.account_id = '500014030000'
		]]>
	</select>
	
	<!-- 현금흐름표 > account_values 가져오기(시간 순서대로) -->
	<select id="select_cash_values" parameterType="java.util.Map" resultType="JoinStatementDTO">
		<![CDATA[
		 SELECT s.account_value, s.reg_date, s.statement_id, tax.account_id
	      FROM statement s left outer JOIN sales_statement sales ON s.statement_id = sales.statement_id 
	     	  			  left outer JOIN purchase_statement purc ON s.statement_id = purc.statement_id
	     	  			  left outer JOIN salary_register_statement salary ON s.statement_id = salary.statement_id
	     	  			  left outer JOIN tax_statement tax ON s.statement_id = tax.statement_id
         WHERE  s.reg_date >= TO_DATE(#{startDate},'YYYY-MM-DD') AND s.reg_date <= TO_DATE(#{endDate},'YYYY-MM-DD')
          	     AND  tax.account_id = '500011010000' OR sales.account_id = '500011010000' OR purc.account_id= '500011010000' OR salary.account_id= '500011010000'
          	     AND s.APPROVAL_STATE='25452'
	     ORDER BY s.reg_date
		]]>
	</select>
	
	<!-- 현금흐름표 > account_name 가져오기 -->
	<select id="select_account_name_for_tax" parameterType="String" resultType="String">
		<![CDATA[
		SELECT account_name FROM account WHERE account_id = (
	       SELECT tax.account_id FROM statement s JOIN tax_statement tax ON s.statement_id = tax.statement_id
	       	WHERE s.reg_date = (SELECT reg_date FROM statement WHERE statement_id = #{statement_id})
	         AND tax.statement_id <> #{statement_id})
		]]>
	</select>
	<select id="select_account_name_for_all" parameterType="String" resultType="String">
		<![CDATA[
		 SELECT account_name FROM account WHERE account_id = (SELECT account_id FROM sales_statement 
		 													  WHERE sales_id= (SELECT sales_id FROM sales_statement 
		 																	   WHERE account_id=500011010000
		 																		 AND statement_Id = #{statement_id})
                                                                AND account_id <> '500011010000'
                                                                                                          
                                                             UNION 
                                                             SELECT account_id FROM purchase_statement 
                                                             WHERE purchase_id= (SELECT purchase_id FROM sales_statement 
                                                              					 WHERE account_id=500011010000
                                                              					 AND statement_Id = #{statement_id})
                                                             AND account_id <> '500011010000'
                                                                                                          
                                                             UNION 
                                                             SELECT account_id FROM salary_register_statement 
                                                             WHERE salary_register_id= (SELECT salary_register_id FROM salary_register_statement 
                                                             							WHERE account_id=500011010000
                                                             							  AND statement_Id = #{statement_id})
                                                             AND account_id <> '500011010000'                           
                                                            )
		]]>
	</select>
	

</mapper>
